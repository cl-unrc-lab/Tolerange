Process ProbMemory {
    w: BOOL; // the last value written, 
	r: BOOL; // the value we can read from the memory
    b0: BOOL; // the first bit
    b1: BOOL; // the second bit
    b2: BOOL; // the third bit
    refresh: BOOL; // true if it refreshes in next action
    flip: BOOL // fault flag
  
    Initial: w && b0 && b1 && b2 && r && !refresh && !flip;
	
	[write] true -> w=!w, b0=!b0, b1=!b1, b2=!b2, r =!r;
	[read0] !r -> r = r;
	[read1] r -> r = r;
	[tick] true -> 0.5 : r = r + 
				   0.1 : flip = true +
				   0.4 : refresh = true;
	[refresh] refresh && r -> b0 = r, refresh = false;
	[refresh] refresh && !r -> b0 = !r, refresh = false;
	faulty [fault] flip -> b0=!b0, r =(!b0&&b1)||(b1&&b2)||(!b0&&b2), flip = false; 
	faulty [fault] flip -> b1=!b1, r =(b0&&!b1)||(!b1&&b2)||(b0&&b2), flip = false; 
	faulty [fault] flip -> b2=!b2, r =(b0&&b1)||(b1&&!b2)||(b0&&!b2), flip = false;
	
}

Main(){
	m1: ProbMemory;
	run m1();
}


