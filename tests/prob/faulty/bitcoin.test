Enum STATE = {idle,blockSent};
Global SUFFIX: INT;

Global n1n2: BOOL; 
Global n1n3: BOOL;

Global n2n1: BOOL; 
Global n2n3: BOOL;

Global n3n1: BOOL; 
Global n3n2: BOOL;


Process Node(sacc1:BOOL,sacc2:BOOL, acc1:BOOL, acc2:BOOL){
	s: STATE;
	f: BOOL;
	Initial: s == idle && SUFFIX == 0 && !f;

	[POW] s == idle -> 0.05 : s = blockSent + 0.95: s = idle;
	[receiveAccepts]  acc1 && acc2 && s == blockSent && SUFFIX < 3 -> s = idle, acc1 = false && acc2 = false && SUFFIX = SUFFIX + 1;
	[receiveAccepts]  acc1 && acc2 && s == blockSent && SUFFIX == 3 -> s = idle, acc1 = false && acc2 = false;
	[sendAccept1] !sacc1 -> sacc1 = true;
	[sendAccept2] !sacc2 -> sacc2 = true;


	[byz] faulty !f -> 0.1 : f = true + 0.9: f = f;
	[POW] s == idle && f && SUFFIX > 0 -> 0.05 : SUFFIX = SUFFIX - 1 + 0.95: s = idle;
	[POW] s == idle && f && SUFFIX == 0 -> 0.05 : s = blockSent + 0.95: s = idle;
	[attackSuccess]  acc1 && acc2 && f && s == blockSent && SUFFIX == 0 -> s = idle, acc1 = false && acc2 = false;
}


Main(){
    n1:Node;
    n2:Node;
    n3:Node;
    run n1(n1n2,n1n3);
    run n2(n2n1,n2n3);
    run n3(n3n1,n3n2);
}