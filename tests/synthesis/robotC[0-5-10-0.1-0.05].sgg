// Board:
//
//   [0|<>] [4|<>] [1|->] [0|<>] [0|<>] 
//   [0|<-] [2|<>] [0|<-] [0|<>] [0|->] 
//   [0|->] [3|<>] [0|<-] [1|->] [3|->] 
//   [1|<>] [0|->] [1|->] [1|->] [0|->] 
//   [0|<-] [0|<>] [0|->] [1|->] [2|<>] 
//   [0|<>] [2|<-] [2|->] [0|<-] [3|<>] 
//   [0|<>] [3|<>] [1|->] [0|<-] [2|->] 
//   [0|->] [1|<>] [0|->] [0|<>] [2|<>] 
//   [4|<-] [1|->] [3|<-] [0|<-] [0|<-] 
//   [0|->] [0|->] [0|->] [0|->] [0|<-] 

Process Robot {
    col : INT ;    // col in [0,width-1] and row  in [0,length-1] indicate
    row : INT ;    // the robot's position in the board

    light : INT ;  // current light color
                   // 0 : red (light's turn)                
                   // 1 : yellow (robot moves sideways)     
                   // 2 : green (robot moves forward)       
                   // 3 : off (light fails, robot moves any)

   Rewards :
       row == 0 && col == 0 : 0 ,
       row == 0 && col == 1 : 4 ,
       row == 0 && col == 2 : 1 ,
       row == 0 && col == 3 : 0 ,
       row == 0 && col == 4 : 0 ,
       row == 1 && col == 0 : 0 ,
       row == 1 && col == 1 : 2 ,
       row == 1 && col == 2 : 0 ,
       row == 1 && col == 3 : 0 ,
       row == 1 && col == 4 : 0 ,
       row == 2 && col == 0 : 0 ,
       row == 2 && col == 1 : 3 ,
       row == 2 && col == 2 : 0 ,
       row == 2 && col == 3 : 1 ,
       row == 2 && col == 4 : 3 ,
       row == 3 && col == 0 : 1 ,
       row == 3 && col == 1 : 0 ,
       row == 3 && col == 2 : 1 ,
       row == 3 && col == 3 : 1 ,
       row == 3 && col == 4 : 0 ,
       row == 4 && col == 0 : 0 ,
       row == 4 && col == 1 : 0 ,
       row == 4 && col == 2 : 0 ,
       row == 4 && col == 3 : 1 ,
       row == 4 && col == 4 : 2 ,
       row == 5 && col == 0 : 0 ,
       row == 5 && col == 1 : 2 ,
       row == 5 && col == 2 : 2 ,
       row == 5 && col == 3 : 0 ,
       row == 5 && col == 4 : 3 ,
       row == 6 && col == 0 : 0 ,
       row == 6 && col == 1 : 3 ,
       row == 6 && col == 2 : 1 ,
       row == 6 && col == 3 : 0 ,
       row == 6 && col == 4 : 2 ,
       row == 7 && col == 0 : 0 ,
       row == 7 && col == 1 : 1 ,
       row == 7 && col == 2 : 0 ,
       row == 7 && col == 3 : 0 ,
       row == 7 && col == 4 : 2 ,
       row == 8 && col == 0 : 4 ,
       row == 8 && col == 1 : 1 ,
       row == 8 && col == 2 : 3 ,
       row == 8 && col == 3 : 0 ,
       row == 8 && col == 4 : 0 ,
       row == 9 && col == 0 : 0 ,
       row == 9 && col == 1 : 0 ,
       row == 9 && col == 2 : 0 ,
       row == 9 && col == 3 : 0 ,
       row == 9 && col == 4 : 0 ,
       row == 10 : 0 ;

   Controller : !(light == 0);
   Goal : row ==10;
    // Initially the robot is positioned in (0,0) and the light is ready to move
    Initial : col==0 && row==0 && light==0 ;

    // light moves

    [l_y] light == 0 -> 0.95 : light = 1 ++ 0.05 : light = 3 ;
    [l_r] light == 0 -> 0.95 : light = 2 ++ 0.05 : light = 3 ;

    // lightrobot moves

    [r_l] (light == 1 || light == 3) && (row == 0) && (col == 0) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 0) && (col == 0) -> 0.9 : light = 0, col = 1 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 0) && (col == 1) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 0) && (col == 1) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 0) && (col == 2) -> 0.9 : light = 0, col = 3 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 0) && (col == 3) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 0) && (col == 3) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 0) && (col == 4) -> 0.9 : light = 0, col = 3 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 0) && (col == 4) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_f] (light == 2 || light == 3) && (row == 0) -> 0.9 : light = 0, row = 1 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 1) && (col == 0) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 1) && (col == 1) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 1) && (col == 1) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 1) && (col == 2) -> 0.9 : light = 0, col = 1 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 1) && (col == 3) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 1) && (col == 3) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 1) && (col == 4) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_f] (light == 2 || light == 3) && (row == 1) -> 0.9 : light = 0, row = 2 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 2) && (col == 0) -> 0.9 : light = 0, col = 1 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 2) && (col == 1) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 2) && (col == 1) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 2) && (col == 2) -> 0.9 : light = 0, col = 1 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 2) && (col == 3) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 2) && (col == 4) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_f] (light == 2 || light == 3) && (row == 2) -> 0.9 : light = 0, row = 3 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 3) && (col == 0) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 3) && (col == 0) -> 0.9 : light = 0, col = 1 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 3) && (col == 1) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 3) && (col == 2) -> 0.9 : light = 0, col = 3 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 3) && (col == 3) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 3) && (col == 4) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_f] (light == 2 || light == 3) && (row == 3) -> 0.9 : light = 0, row = 4 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 4) && (col == 0) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 4) && (col == 1) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 4) && (col == 1) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 4) && (col == 2) -> 0.9 : light = 0, col = 3 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 4) && (col == 3) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 4) && (col == 4) -> 0.9 : light = 0, col = 3 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 4) && (col == 4) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_f] (light == 2 || light == 3) && (row == 4) -> 0.9 : light = 0, row = 5 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 5) && (col == 0) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 5) && (col == 0) -> 0.9 : light = 0, col = 1 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 5) && (col == 1) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 5) && (col == 2) -> 0.9 : light = 0, col = 3 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 5) && (col == 3) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 5) && (col == 4) -> 0.9 : light = 0, col = 3 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 5) && (col == 4) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_f] (light == 2 || light == 3) && (row == 5) -> 0.9 : light = 0, row = 6 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 6) && (col == 0) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 6) && (col == 0) -> 0.9 : light = 0, col = 1 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 6) && (col == 1) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 6) && (col == 1) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 6) && (col == 2) -> 0.9 : light = 0, col = 3 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 6) && (col == 3) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 6) && (col == 4) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_f] (light == 2 || light == 3) && (row == 6) -> 0.9 : light = 0, row = 7 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 7) && (col == 0) -> 0.9 : light = 0, col = 1 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 7) && (col == 1) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 7) && (col == 1) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 7) && (col == 2) -> 0.9 : light = 0, col = 3 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 7) && (col == 3) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 7) && (col == 3) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 7) && (col == 4) -> 0.9 : light = 0, col = 3 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 7) && (col == 4) -> 0.9 : light = 0, col = 0 ++ 0.1 : light = 0 ;
    [r_f] (light == 2 || light == 3) && (row == 7) -> 0.9 : light = 0, row = 8 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 8) && (col == 0) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 8) && (col == 1) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 8) && (col == 2) -> 0.9 : light = 0, col = 1 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 8) && (col == 3) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 8) && (col == 4) -> 0.9 : light = 0, col = 3 ++ 0.1 : light = 0 ;
    [r_f] (light == 2 || light == 3) && (row == 8) -> 0.9 : light = 0, row = 9 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 9) && (col == 0) -> 0.9 : light = 0, col = 1 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 9) && (col == 1) -> 0.9 : light = 0, col = 2 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 9) && (col == 2) -> 0.9 : light = 0, col = 3 ++ 0.1 : light = 0 ;
    [r_r] (light == 1 || light == 3) && (row == 9) && (col == 3) -> 0.9 : light = 0, col = 4 ++ 0.1 : light = 0 ;
    [r_l] (light == 1 || light == 3) && (row == 9) && (col == 4) -> 0.9 : light = 0, col = 3 ++ 0.1 : light = 0 ;
    [r_f] (light == 2 || light == 3) && (row == 9) -> 0.9 : light = 0, row = 10 ++ 0.1 : light = 0 ;
    [r_f] (row == 10) -> row = 10 ;
}

Main() {
    robot : Robot ;
    run robot() ;
}
