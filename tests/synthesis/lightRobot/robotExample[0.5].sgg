// Board:
//
//   [0|<>] [0|->] [0|<>] [0|<>] 
//   [2|<-] [6|->] [1|->] [4|->] 
//   [0|<>] [1|->] [2|<>] [0|<>] 
//   [4|<>] [2|<-] [0|<-] [2|->] 

Process Robot {
    col : INT ;    // col in [0,width-1] and row  in [0,length-1] indicate
    row : INT ;    // the robot's position in the board

    light : INT ;  // current light color
                   // 0 : red (light's turn)
                   // 1 : yellow (robot moves sideways)
                   // 2 : green (robot moves forward)

   Rewards :
       !(light == 0) && row == 0 && col == 0 : 0 ,
       !(light == 0) && row == 0 && col == 1 : 0 ,
       !(light == 0) && row == 0 && col == 2 : 0 ,
       !(light == 0) && row == 0 && col == 3 : 0 ,
       !(light == 0) && row == 1 && col == 0 : 2 ,
       !(light == 0) && row == 1 && col == 1 : 6 ,
       !(light == 0) && row == 1 && col == 2 : 1 ,
       !(light == 0) && row == 1 && col == 3 : 4 ,
       !(light == 0) && row == 2 && col == 0 : 0 ,
       !(light == 0) && row == 2 && col == 1 : 1 ,
       !(light == 0) && row == 2 && col == 2 : 2 ,
       !(light == 0) && row == 2 && col == 3 : 0 ,
       !(light == 0) && row == 3 && col == 0 : 4 ,
       !(light == 0) && row == 3 && col == 1 : 2 ,
       !(light == 0) && row == 3 && col == 2 : 0 ,
       !(light == 0) && row == 3 && col == 3 : 2 ,
       !(light == 0) && row == 4 : 0 ,
       light == 0 : 0 ;

   Controller : !(light == 0);
   Goal : row ==4;
    // Initially the robot is positioned in (0,0) and the light is ready to move
    Initial : col==0 && row==0 && light==0 ;

    // light moves

    [l_y] light == 0 -> light = 1 ;
    [l_r] light == 0 -> light = 2 ;

    // lightrobot moves

    [r_l] (light == 1) && (row == 0) && (col == 0) -> 0.5 : light = 0, col = 3 ++ 0.5 : light = 0 ;
    [r_r] (light == 1) && (row == 0) && (col == 0) -> 0.5 : light = 0, col = 1 ++ 0.5 : light = 0 ;
    [r_r] (light == 1) && (row == 0) && (col == 1) -> 0.5 : light = 0, col = 2 ++ 0.5 : light = 0 ;
    [r_l] (light == 1) && (row == 0) && (col == 2) -> 0.5 : light = 0, col = 1 ++ 0.5 : light = 0 ;
    [r_r] (light == 1) && (row == 0) && (col == 2) -> 0.5 : light = 0, col = 3 ++ 0.5 : light = 0 ;
    [r_l] (light == 1) && (row == 0) && (col == 3) -> 0.5 : light = 0, col = 2 ++ 0.5 : light = 0 ;
    [r_r] (light == 1) && (row == 0) && (col == 3) -> 0.5 : light = 0, col = 0 ++ 0.5 : light = 0 ;
    [r_f] (light == 2) && (row == 0) -> 0.5 : light = 0, row = 1 ++ 0.5 : light = 0 ;
    [r_l] (light == 1) && (row == 1) && (col == 0) -> 0.5 : light = 0, col = 3 ++ 0.5 : light = 0 ;
    [r_r] (light == 1) && (row == 1) && (col == 1) -> 0.5 : light = 0, col = 2 ++ 0.5 : light = 0 ;
    [r_r] (light == 1) && (row == 1) && (col == 2) -> 0.5 : light = 0, col = 3 ++ 0.5 : light = 0 ;
    [r_r] (light == 1) && (row == 1) && (col == 3) -> 0.5 : light = 0, col = 0 ++ 0.5 : light = 0 ;
    [r_f] (light == 2) && (row == 1) -> 0.5 : light = 0, row = 2 ++ 0.5 : light = 0 ;
    [r_l] (light == 1) && (row == 2) && (col == 0) -> 0.5 : light = 0, col = 3 ++ 0.5 : light = 0 ;
    [r_r] (light == 1) && (row == 2) && (col == 0) -> 0.5 : light = 0, col = 1 ++ 0.5 : light = 0 ;
    [r_r] (light == 1) && (row == 2) && (col == 1) -> 0.5 : light = 0, col = 2 ++ 0.5 : light = 0 ;
    [r_l] (light == 1) && (row == 2) && (col == 2) -> 0.5 : light = 0, col = 1 ++ 0.5 : light = 0 ;
    [r_r] (light == 1) && (row == 2) && (col == 2) -> 0.5 : light = 0, col = 3 ++ 0.5 : light = 0 ;
    [r_l] (light == 1) && (row == 2) && (col == 3) -> 0.5 : light = 0, col = 2 ++ 0.5 : light = 0 ;
    [r_r] (light == 1) && (row == 2) && (col == 3) -> 0.5 : light = 0, col = 0 ++ 0.5 : light = 0 ;
    [r_f] (light == 2) && (row == 2) -> 0.5 : light = 0, row = 3 ++ 0.5 : light = 0 ;
    [r_l] (light == 1) && (row == 3) && (col == 0) -> 0.5 : light = 0, col = 3 ++ 0.5 : light = 0 ;
    [r_r] (light == 1) && (row == 3) && (col == 0) -> 0.5 : light = 0, col = 1 ++ 0.5 : light = 0 ;
    [r_l] (light == 1) && (row == 3) && (col == 1) -> 0.5 : light = 0, col = 0 ++ 0.5 : light = 0 ;
    [r_l] (light == 1) && (row == 3) && (col == 2) -> 0.5 : light = 0, col = 1 ++ 0.5 : light = 0 ;
    [r_r] (light == 1) && (row == 3) && (col == 3) -> 0.5 : light = 0, col = 0 ++ 0.5 : light = 0 ;
    [r_f] (light == 2) && (row == 3) -> 0.5 : light = 0, row = 4 ++ 0.5 : light = 0 ;
    [r_f] (row == 4) -> row = 4 ;
}

Main() {
    robot : Robot ;
    run robot() ;
}
