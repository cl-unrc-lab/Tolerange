
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 17 15:46:05 ART 2022
//----------------------------------------------------

package parserProgram;

import java_cup.runtime.*;
import lang.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 17 15:46:05 ART 2022
  */
public class parserLang extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserLang() {super();}

  /** Constructor which sets the default scanner. */
  public parserLang(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserLang(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\044\003\000\002\034" +
    "\010\000\002\034\006\000\002\034\006\000\002\034\004" +
    "\000\002\051\003\000\002\051\005\000\002\050\010\000" +
    "\002\047\003\000\002\047\005\000\002\033\003\000\002" +
    "\033\005\000\002\032\006\000\002\031\003\000\002\031" +
    "\004\000\002\025\005\000\002\025\010\000\002\027\003" +
    "\000\002\027\005\000\002\030\005\000\002\026\012\000" +
    "\002\026\010\000\002\026\022\000\002\026\020\000\002" +
    "\017\005\000\002\020\005\000\002\021\005\000\002\060" +
    "\005\000\002\060\006\000\002\060\007\000\002\022\003" +
    "\000\002\022\005\000\002\023\005\000\002\024\003\000" +
    "\002\024\005\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\016\003\000\002\016\005\000\002\015" +
    "\011\000\002\015\011\000\002\052\005\000\002\052\004" +
    "\000\002\053\003\000\002\053\002\000\002\054\003\000" +
    "\002\054\002\000\002\057\005\000\002\057\002\000\002" +
    "\056\003\000\002\056\005\000\002\055\005\000\002\014" +
    "\003\000\002\014\005\000\002\013\005\000\002\003\003" +
    "\000\002\004\003\000\002\004\005\000\002\005\003\000" +
    "\002\005\005\000\002\007\003\000\002\007\005\000\002" +
    "\006\003\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\010\003\000\002\010\005" +
    "\000\002\010\005\000\002\011\003\000\002\011\005\000" +
    "\002\011\005\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\005\000\002\041\010" +
    "\000\002\042\006\000\002\040\003\000\002\040\005\000" +
    "\002\037\005\000\002\035\003\000\002\035\005\000\002" +
    "\036\006\000\002\036\007\000\002\045\003\000\002\045" +
    "\005\000\002\046\002\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\010\037\013\042\014\043\005\001\002\000" +
    "\004\020\324\001\002\000\004\053\314\001\002\000\006" +
    "\037\ufff3\041\ufff3\001\002\000\004\020\ufffb\001\002\000" +
    "\004\020\310\001\002\000\004\002\000\001\002\000\004" +
    "\020\ufff6\001\002\000\004\053\066\001\002\000\004\053" +
    "\026\001\002\000\006\037\013\041\021\001\002\000\004" +
    "\002\017\001\002\000\004\002\001\001\002\000\004\002" +
    "\ufffc\001\002\000\004\012\023\001\002\000\006\037\ufff2" +
    "\041\ufff2\001\002\000\004\013\024\001\002\000\004\014" +
    "\025\001\002\000\004\053\026\001\002\000\006\021\uffdf" +
    "\025\uffdf\001\002\000\004\015\057\001\002\000\004\020" +
    "\uffac\001\002\000\004\020\037\001\002\000\006\021\034" +
    "\025\033\001\002\000\004\053\036\001\002\000\004\053" +
    "\035\001\002\000\004\020\uffaa\001\002\000\006\021\uffde" +
    "\025\uffde\001\002\000\006\040\043\053\026\001\002\000" +
    "\004\020\uffa9\001\002\000\004\020\uffab\001\002\000\004" +
    "\020\055\001\002\000\004\053\044\001\002\000\004\012" +
    "\045\001\002\000\010\013\050\025\uffa3\053\046\001\002" +
    "\000\006\013\uffa2\025\uffa2\001\002\000\006\013\053\025" +
    "\052\001\002\000\004\020\uffa7\001\002\000\006\013\uffa5" +
    "\025\uffa5\001\002\000\010\013\uffa3\025\uffa3\053\046\001" +
    "\002\000\004\020\uffa6\001\002\000\006\013\uffa4\025\uffa4" +
    "\001\002\000\006\015\uffad\040\043\001\002\000\004\020" +
    "\uffa8\001\002\000\004\002\uffae\001\002\000\006\021\061" +
    "\025\033\001\002\000\010\034\065\035\064\053\062\001" +
    "\002\000\010\013\uffdb\020\uffdb\025\uffdb\001\002\000\004" +
    "\020\ufff4\001\002\000\010\013\uffdc\020\uffdc\025\uffdc\001" +
    "\002\000\010\013\uffdd\020\uffdd\025\uffdd\001\002\000\006" +
    "\012\071\014\070\001\002\000\006\037\ufff1\041\ufff1\001" +
    "\002\000\010\036\105\044\107\053\026\001\002\000\004" +
    "\053\072\001\002\000\004\021\101\001\002\000\006\013" +
    "\076\025\075\001\002\000\006\013\uffef\025\uffef\001\002" +
    "\000\004\053\072\001\002\000\004\014\070\001\002\000" +
    "\006\037\ufff0\041\ufff0\001\002\000\006\013\uffee\025\uffee" +
    "\001\002\000\010\034\065\035\064\053\062\001\002\000" +
    "\006\013\uffed\025\uffed\001\002\000\004\020\264\001\002" +
    "\000\004\020\uffe2\001\002\000\004\021\262\001\002\000" +
    "\006\021\260\025\033\001\002\000\004\021\225\001\002" +
    "\000\004\020\111\001\002\000\004\016\115\001\002\000" +
    "\026\006\uffcf\011\uffcf\012\uffcf\031\124\047\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\001\002\000\004\020" +
    "\121\001\002\000\004\020\uffda\001\002\000\006\017\117" +
    "\053\116\001\002\000\004\017\120\001\002\000\026\006" +
    "\uffd5\011\uffd5\012\uffd5\031\uffd5\047\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\001\002\000\026\006\uffd6\011" +
    "\uffd6\012\uffd6\031\uffd6\047\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\001\002\000\006\015\123\016\115\001" +
    "\002\000\004\020\uffd9\001\002\000\006\037\uffeb\041\uffeb" +
    "\001\002\000\004\047\223\001\002\000\024\006\uffd3\011" +
    "\uffd3\012\uffd3\047\uffd3\051\uffd3\052\uffd3\053\uffd3\054\126" +
    "\055\uffd3\001\002\000\022\006\uffd4\011\uffd4\012\uffd4\047" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4\001\002\000\022" +
    "\006\uffd1\011\uffd1\012\uffd1\047\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\055\131\001\002\000\020\006\132\011\146\012\150" +
    "\047\134\051\140\052\143\053\144\001\002\000\020\006" +
    "\uffd2\011\uffd2\012\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\001\002\000\020\006\132\011\146\012\150\047\134\051" +
    "\140\052\143\053\144\001\002\000\022\005\uffc7\013\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\025\uffc7\026\uffc7\027\216\001" +
    "\002\000\044\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3" +
    "\013\uffb3\020\uffb3\021\uffb3\022\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\001\002" +
    "\000\024\005\uffc3\013\uffc3\020\uffc3\021\uffc3\022\uffc3\024" +
    "\220\025\uffc3\026\uffc3\027\uffc3\001\002\000\044\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\013\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\001\002\000\044\004\uffbc\005" +
    "\uffbc\006\uffbc\007\204\010\203\013\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\001\002\000\044\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\013\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\001\002\000\020\005\uffc8\013\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\025\uffc8\026\214\001\002\000\040" +
    "\004\177\005\uffc1\006\201\013\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\175\031\174" +
    "\032\176\033\200\001\002\000\044\004\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\013\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\001\002\000\044\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\013\uffb0\020\uffb0\021\uffb0\022\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\001\002\000\044\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\013\uffb9\020\uffb9\021\uffb9\022\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\001\002\000\020\006\132\011\146\012\150\047\134" +
    "\051\140\052\143\053\144\001\002\000\004\022\154\001" +
    "\002\000\020\006\132\011\146\012\150\047\134\051\140" +
    "\052\143\053\144\001\002\000\022\005\uffc5\013\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\025\uffc5\026\uffc5\027\uffc5\001\002" +
    "\000\004\013\153\001\002\000\044\004\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\013\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\001\002\000\006\050\156\053\155\001\002" +
    "\000\004\023\171\001\002\000\004\021\167\001\002\000" +
    "\006\005\uffce\020\uffce\001\002\000\006\020\uffd7\025\165" +
    "\001\002\000\006\005\163\020\uffd8\001\002\000\010\005" +
    "\uffcb\020\uffcb\025\uffcb\001\002\000\004\050\156\001\002" +
    "\000\006\005\uffcd\020\uffcd\001\002\000\004\053\155\001" +
    "\002\000\010\005\uffca\020\uffca\025\uffca\001\002\000\004" +
    "\053\155\001\002\000\010\005\uffcc\020\uffcc\025\165\001" +
    "\002\000\020\006\132\011\146\012\150\047\134\051\140" +
    "\052\143\053\144\001\002\000\010\005\uffc9\020\uffc9\025" +
    "\uffc9\001\002\000\044\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\013\uffb5\020\uffb5\021\uffb5\022\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\001\002\000\020\006\132\011\146\012\150\047\134\051" +
    "\140\052\143\053\144\001\002\000\020\006\132\011\146" +
    "\012\150\047\134\051\140\052\143\053\144\001\002\000" +
    "\020\006\132\011\146\012\150\047\134\051\140\052\143" +
    "\053\144\001\002\000\020\006\132\011\146\012\150\047" +
    "\134\051\140\052\143\053\144\001\002\000\020\006\132" +
    "\011\146\012\150\047\134\051\140\052\143\053\144\001" +
    "\002\000\020\006\132\011\146\012\150\047\134\051\140" +
    "\052\143\053\144\001\002\000\044\004\uffba\005\uffba\006" +
    "\uffba\007\204\010\203\013\uffba\020\uffba\021\uffba\022\uffba" +
    "\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\001\002\000\020\006\132\011\146\012\150" +
    "\047\134\051\140\052\143\053\144\001\002\000\020\006" +
    "\132\011\146\012\150\047\134\051\140\052\143\053\144" +
    "\001\002\000\044\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\013\uffb8\020\uffb8\021\uffb8\022\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\001" +
    "\002\000\044\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\013\uffb7\020\uffb7\021\uffb7\022\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\001\002" +
    "\000\030\004\177\005\uffbd\006\201\013\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\001\002" +
    "\000\044\004\uffbb\005\uffbb\006\uffbb\007\204\010\203\013" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\001\002\000" +
    "\030\004\177\005\uffbe\006\201\013\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\001\002\000" +
    "\030\004\177\005\uffbf\006\201\013\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\001\002\000" +
    "\030\004\177\005\uffc0\006\201\013\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\001\002\000" +
    "\020\006\132\011\146\012\150\047\134\051\140\052\143" +
    "\053\144\001\002\000\022\005\uffc6\013\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\025\uffc6\026\uffc6\027\216\001\002\000\020" +
    "\006\132\011\146\012\150\047\134\051\140\052\143\053" +
    "\144\001\002\000\022\005\uffc4\013\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\025\uffc4\026\uffc4\027\uffc4\001\002\000\020\006" +
    "\132\011\146\012\150\047\134\051\140\052\143\053\144" +
    "\001\002\000\022\005\uffc2\013\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\001\002\000\044\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\013\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\001\002\000\004\030\224\001" +
    "\002\000\024\006\uffd0\011\uffd0\012\uffd0\047\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\001\002\000\020\006" +
    "\132\011\146\012\150\047\134\051\140\052\143\053\144" +
    "\001\002\000\004\021\254\001\002\000\006\020\231\025" +
    "\230\001\002\000\020\006\132\011\146\012\150\047\134" +
    "\051\140\052\143\053\144\001\002\000\004\045\232\001" +
    "\002\000\004\021\247\001\002\000\004\020\234\001\002" +
    "\000\004\046\236\001\002\000\004\020\241\001\002\000" +
    "\004\021\237\001\002\000\020\006\132\011\146\012\150" +
    "\047\134\051\140\052\143\053\144\001\002\000\004\020" +
    "\uffe6\001\002\000\004\036\105\001\002\000\004\020\243" +
    "\001\002\000\004\016\115\001\002\000\004\020\245\001" +
    "\002\000\006\015\246\016\115\001\002\000\006\037\uffe9" +
    "\041\uffe9\001\002\000\020\006\132\011\146\012\150\047" +
    "\134\051\140\052\143\053\144\001\002\000\004\020\uffe7" +
    "\001\002\000\004\021\252\001\002\000\004\047\253\001" +
    "\002\000\006\020\uffe3\025\uffe3\001\002\000\006\006\256" +
    "\047\255\001\002\000\006\020\uffe5\025\uffe5\001\002\000" +
    "\004\047\257\001\002\000\006\020\uffe4\025\uffe4\001\002" +
    "\000\010\034\065\035\064\053\062\001\002\000\004\020" +
    "\uffe0\001\002\000\020\006\132\011\146\012\150\047\134" +
    "\051\140\052\143\053\144\001\002\000\004\020\uffe8\001" +
    "\002\000\010\036\105\044\266\053\026\001\002\000\004" +
    "\020\uffe1\001\002\000\004\021\274\001\002\000\004\020" +
    "\270\001\002\000\004\016\115\001\002\000\004\020\272" +
    "\001\002\000\006\015\273\016\115\001\002\000\006\037" +
    "\uffec\041\uffec\001\002\000\020\006\132\011\146\012\150" +
    "\047\134\051\140\052\143\053\144\001\002\000\006\020" +
    "\276\025\230\001\002\000\004\045\232\001\002\000\004" +
    "\020\300\001\002\000\004\046\236\001\002\000\004\020" +
    "\302\001\002\000\004\036\105\001\002\000\004\020\304" +
    "\001\002\000\004\016\115\001\002\000\004\020\306\001" +
    "\002\000\006\015\307\016\115\001\002\000\006\037\uffea" +
    "\041\uffea\001\002\000\006\037\013\042\014\001\002\000" +
    "\004\020\ufff5\001\002\000\006\037\013\041\021\001\002" +
    "\000\004\002\ufffe\001\002\000\004\023\315\001\002\000" +
    "\004\014\316\001\002\000\004\053\317\001\002\000\006" +
    "\015\ufff8\025\ufff8\001\002\000\006\015\322\025\321\001" +
    "\002\000\004\053\323\001\002\000\004\020\ufff9\001\002" +
    "\000\006\015\ufff7\025\ufff7\001\002\000\010\037\013\042" +
    "\014\043\005\001\002\000\004\020\331\001\002\000\004" +
    "\020\ufffa\001\002\000\006\037\013\041\021\001\002\000" +
    "\004\002\ufffd\001\002\000\006\037\013\042\014\001\002" +
    "\000\006\037\013\041\021\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\022\025\005\031\014\032\011\033\007\034" +
    "\010\044\015\050\006\051\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\057\001\001\000\006\025\021\041" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\031\037\027\040\030" +
    "\042\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\031\035\041\036\037\037\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\045\046\046\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\066\001\001" +
    "\000\002\001\001\000\012\017\107\022\102\023\103\024" +
    "\105\001\001\000\006\027\072\030\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\077\001\001\000\004\026\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\113\016\112\052\111\001\001\000\004\057\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\121\052\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\126\001\001" +
    "\000\002\001\001\000\004\054\127\001\001\000\024\002" +
    "\135\003\146\004\140\005\132\006\134\007\150\010\141" +
    "\011\136\012\144\001\001\000\002\001\001\000\006\002" +
    "\135\012\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\135\012\172\001\001\000\002\001\001\000\024\002\135" +
    "\003\151\004\140\005\132\006\134\007\150\010\141\011" +
    "\136\012\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\161\014\157\055\156\056" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\163\001\001\000\002\001\001\000\004" +
    "\013\165\001\001\000\002\001\001\000\006\013\161\014" +
    "\167\001\001\000\002\001\001\000\024\002\135\003\171" +
    "\004\140\005\132\006\134\007\150\010\141\011\136\012" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\135\010\212\011\136\012\144\001\001\000\012\002" +
    "\135\010\211\011\136\012\144\001\001\000\012\002\135" +
    "\010\210\011\136\012\144\001\001\000\010\002\135\011" +
    "\207\012\144\001\001\000\012\002\135\010\206\011\136" +
    "\012\144\001\001\000\010\002\135\011\201\012\144\001" +
    "\001\000\002\001\001\000\006\002\135\012\205\001\001" +
    "\000\006\002\135\012\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\002" +
    "\135\005\214\006\134\007\150\010\141\011\136\012\144" +
    "\001\001\000\002\001\001\000\016\002\135\006\134\007" +
    "\216\010\141\011\136\012\144\001\001\000\002\001\001" +
    "\000\014\002\135\006\220\010\141\011\136\012\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\135\003\225\004\140\005" +
    "\132\006\134\007\150\010\141\011\136\012\144\060\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\135\003\250\004\140\005\132\006\134\007\150\010\141" +
    "\011\136\012\144\001\001\000\004\020\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\002\135\003" +
    "\237\004\140\005\132\006\134\007\150\010\141\011\136" +
    "\012\144\001\001\000\002\001\001\000\004\017\241\001" +
    "\001\000\002\001\001\000\010\015\113\016\243\052\111" +
    "\001\001\000\002\001\001\000\006\015\121\052\111\001" +
    "\001\000\002\001\001\000\024\002\135\003\247\004\140" +
    "\005\132\006\134\007\150\010\141\011\136\012\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\260\001\001" +
    "\000\002\001\001\000\024\002\135\003\262\004\140\005" +
    "\132\006\134\007\150\010\141\011\136\012\144\001\001" +
    "\000\002\001\001\000\010\017\266\023\264\024\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\113\016\270\052\111\001\001\000\002\001" +
    "\001\000\006\015\121\052\111\001\001\000\002\001\001" +
    "\000\026\002\135\003\225\004\140\005\132\006\134\007" +
    "\150\010\141\011\136\012\144\060\274\001\001\000\002" +
    "\001\001\000\004\020\276\001\001\000\002\001\001\000" +
    "\004\021\300\001\001\000\002\001\001\000\004\017\302" +
    "\001\001\000\002\001\001\000\010\015\113\016\304\052" +
    "\111\001\001\000\002\001\001\000\006\015\121\052\111" +
    "\001\001\000\002\001\001\000\010\025\005\031\311\032" +
    "\310\001\001\000\002\001\001\000\006\025\021\041\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\005\031\326\032\011\033\324\050\325" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\021\041\327\001\001\000\002\001\001\000\010\025\005" +
    "\031\331\032\310\001\001\000\006\025\021\041\332\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserLang$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserLang$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserLang$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
    public void syntax_error(Symbol s){
        System.err.println("\n\nSyntax Error - line: " +  (s.left+1) +  " - value:" + s.value);
        
    }


    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {    
         System.err.println("\n\nUnrecovered Syntax error line: " +  (s.left+1) +  " - value:" + s.value);
    }
                                 	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserLang$actions {
  private final parserLang parser;

  /** Constructor */
  CUP$parserLang$actions(parserLang parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserLang$do_action(
    int                        CUP$parserLang$act_num,
    java_cup.runtime.lr_parser CUP$parserLang$parser,
    java.util.Stack            CUP$parserLang$stack,
    int                        CUP$parserLang$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserLang$result;

      /* select the action based on the action number */
      switch (CUP$parserLang$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // invkParam ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  Var value = new Var(id);
                       RESULT= value;
                    
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("invkParam",36, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // invkParam ::= 
            {
              Expression RESULT =null;

              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("invkParam",36, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // invkParamList ::= invkParamList COMMA invkParam 
            {
              LinkedList<Expression> RESULT =null;
		int listInvkleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listInvkright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Expression> listInvk = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression par = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 listInvk.add(par);
                                                 RESULT = listInvk;
    
                                              
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("invkParamList",35, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // invkParamList ::= invkParam 
            {
              LinkedList<Expression> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression par = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		
                                    LinkedList<Expression> listInvk = new LinkedList<Expression>();
                                    listInvk.add(par);
                                    RESULT = listInvk;
                           
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("invkParamList",35, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // invk ::= RUN ID LPARENT invkParamList RPARENT 
            {
              InvkProcess RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		LinkedList<Expression> listP = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		
                                                    RESULT = new InvkProcess(id,listP);
                                                
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("invk",28, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // invk ::= RUN ID LPARENT RPARENT 
            {
              InvkProcess RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		
                                      RESULT = new InvkProcess(id);
                                   
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("invk",28, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // processInvk ::= processInvk SEMICOLON invk 
            {
              LinkedList<InvkProcess> RESULT =null;
		int listInvkleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listInvkright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<InvkProcess> listInvk = (LinkedList<InvkProcess>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int infoProcleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int infoProcright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		InvkProcess infoProc = (InvkProcess)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 listInvk.add(infoProc);
                                                                  RESULT = listInvk;
                        
                                                               
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("processInvk",27, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // processInvk ::= invk 
            {
              LinkedList<InvkProcess> RESULT =null;
		int infoProcleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int infoProcright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		InvkProcess infoProc = (InvkProcess)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		
                                 LinkedList<InvkProcess> listInvk = new LinkedList<InvkProcess>();
                                 listInvk.add(infoProc);
                                 RESULT = listInvk;
                              
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("processInvk",27, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // proc ::= varDecls COLON ID 
            {
              LinkedList<ProcessDecl> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int typeProcleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int typeProcright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String typeProc = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<ProcessDecl> listProcess = new LinkedList<ProcessDecl>();
                                              ProcessDecl p;
                                              for (int i = 0; i < listNames.size(); i++){
                                                    p= new ProcessDecl( listNames.get(i) , typeProc);
                                                    listProcess.add(p);
                                                   
                                               }

                                             RESULT = listProcess;
                                          
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("proc",29, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // processDecl ::= processDecl SEMICOLON proc 
            {
              LinkedList<ProcessDecl> RESULT =null;
		int listProcessleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listProcessright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<ProcessDecl> listProcess = (LinkedList<ProcessDecl>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<ProcessDecl> lp = (LinkedList<ProcessDecl>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  for (int i = 0; i < lp.size(); i++){
                                                                  listProcess.add(lp.get(i));
                                                              }
                                                              RESULT = listProcess;
                                                          
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("processDecl",30, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // processDecl ::= proc 
            {
              LinkedList<ProcessDecl> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<ProcessDecl> lp = (LinkedList<ProcessDecl>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<ProcessDecl> listProcess = new LinkedList<ProcessDecl>();
                            for (int i = 0; i < lp.size(); i++){
                               listProcess.add(lp.get(i));
                                                   
                            }
                            RESULT = listProcess;
                        
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("processDecl",30, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // body ::= processDecl SEMICOLON processInvk SEMICOLON 
            {
              Main RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		LinkedList<ProcessDecl> declList = (LinkedList<ProcessDecl>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int invkListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int invkListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		LinkedList<InvkProcess> invkList = (LinkedList<InvkProcess>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		  Main main = new Main(declList,invkList); 
                                                                           RESULT=main; 
                                                                        
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("body",32, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // program ::= MAIN LPARENT RPARENT LBRACE body RBRACE 
            {
              Main RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		Main m = (Main)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		 RESULT= m; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("program",31, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // primary ::= LPARENT expr RPARENT 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		 
                                       RESULT = ex;
                                    
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // primary ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 
                    Var value = new Var(id);
                    RESULT= value; 
                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // primary ::= FALSE 
            {
              Expression RESULT =null;
		  ConsBoolExp value = new ConsBoolExp(false);
                      RESULT = value;
                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // primary ::= TRUE 
            {
              Expression RESULT =null;
		    ConsBoolExp value = new ConsBoolExp(true);
                       RESULT = value;
                   
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // primary ::= INTEGER 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  ConsIntExp value = new ConsIntExp(v);
                           RESULT = value;
                       
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= MINUS factor 
            {
              Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 ConsIntExp zero = new ConsIntExp(new Integer(0));
                                   NegIntExp expr = new NegIntExp(zero,value); 
                                   RESULT = expr;
                                
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= EXCLAMATION factor 
            {
              Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 NegBoolExp expr = new NegBoolExp(value); 
                                        RESULT = expr;
                                     
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= primary 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 RESULT = op;
                       
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // term ::= term SLASH factor 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 DivIntExp expr = new DivIntExp(op1,op2); 
                                         RESULT = expr;
                                       
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // term ::= term ASTERISK factor 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 MultIntExp expr = new MultIntExp(op1,op2); 
                                            RESULT = expr;
                                         
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // term ::= factor 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  RESULT = val; 
                        
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // addition ::= addition MINUS term 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 NegIntExp expr = new NegIntExp(op1,op2); 
                                               RESULT = expr;
                                            
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // addition ::= addition PLUS term 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 SumIntExp expr = new SumIntExp(op1,op2); 
                                              RESULT = expr;
                                           
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // addition ::= term 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  RESULT = val; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relation ::= addition LEQ addition 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 LessOrEqualBoolExp expr = new LessOrEqualBoolExp(op1,op2); 
                                                RESULT = expr;
                                             
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relation ::= addition GEQ addition 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 GreaterOrEqualBoolExp expr = new GreaterOrEqualBoolExp(op1,op2); 
                                                RESULT = expr;
                                             
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relation ::= addition GT addition 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 GreaterBoolExp expr = new GreaterBoolExp(op1,op2); 
                                                RESULT = expr;
                                             
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relation ::= addition LT addition 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 LessBoolExp expr = new LessBoolExp(op1,op2); 
                                                RESULT = expr;
                                             
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relation ::= addition 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  RESULT = val; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comparison ::= relation DOUBLE_EQUAL relation 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 EqBoolExp expr = new EqBoolExp(op1,op2); 
                                                           RESULT = expr;
                                                        
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparison ::= relation 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  RESULT = val; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // conjunction ::= conjunction AND comparison 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 AndBoolExp expr = new AndBoolExp(op1,op2); 
                                                      RESULT = expr;
                                                   
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // conjunction ::= comparison 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  RESULT = val; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // disjunction ::= disjunction OR conjunction 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 OrBoolExp expr = new OrBoolExp(op1,op2); 
                                                      RESULT = expr;
                                                   
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // disjunction ::= conjunction 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 RESULT = val; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= disjunction 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  RESULT = val; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // assignation ::= ID EQUAL expr 
            {
              Code RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		   
                                           Var var = new Var(i);
                                           RESULT = new VarAssign(var,value);
                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("assignation",9, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assigList ::= assigList COMMA assignation 
            {
              LinkedList<Code> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Code> list = (LinkedList<Code>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Code assign = (Code)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 list.add(assign);
                                                          RESULT = list;
                                                       
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("assigList",10, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assigList ::= assignation 
            {
              LinkedList<Code> RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Code assign = (Code)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 LinkedList<Code> list = new LinkedList<Code>();
                                     list.add(assign);
                                     RESULT = list; 
                                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("assigList",10, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assignationProb ::= DOUBLE COLON assigList 
            {
              Code RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Code> l = (LinkedList<Code>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		
                                                    RESULT = new ProbAssign(p,l);
                                                
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("assignationProb",43, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assigListProb ::= assigListProb PLUSPLUS assignationProb 
            {
              LinkedList<Code> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Code> list = (LinkedList<Code>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Code pa = (Code)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 list.add(pa);
                                                          RESULT = list;
                                                       
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("assigListProb",44, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assigListProb ::= assignationProb 
            {
              LinkedList<Code> RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Code pa = (Code)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 LinkedList<Code> list = new LinkedList<Code>();
                                                          list.add(pa);
                                                           RESULT = list;
                                                        
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("assigListProb",44, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // actionReward ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("actionReward",45, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // actionReward ::= LT INTEGER GT 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		 RESULT = i; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("actionReward",45, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // internal ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("internal",42, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // internal ::= INTERNAL 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("internal",42, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // faulty ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("faulty",41, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // faulty ::= FAULTY 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("faulty",41, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // label ::= LBRACKET RBRACKET 
            {
              String RESULT =null;
		 RESULT = new String(""); 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("label",40, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // label ::= LBRACKET ID RBRACKET 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		 RESULT = id; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("label",40, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // branch ::= label actionReward faulty internal expr RIGHTARROW assigList 
            {
              Branch RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Code> list = (LinkedList<Code>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 
                                                  Branch b = new Branch(e,list,f,i,l,r,false);
                                                  RESULT = b;
                                             
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("branch",11, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // branch ::= label actionReward faulty internal expr RIGHTARROW assigListProb 
            {
              Branch RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Code> list = (LinkedList<Code>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  // Probabilistic branch
                                                  Branch b = new Branch(e,list,f,i,l,r,true);
                                                  RESULT = b;
                                             
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("branch",11, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // branchList ::= branchList SEMICOLON branch 
            {
              LinkedList<Branch> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Branch> list = (LinkedList<Branch>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Branch b = (Branch)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 list.add(b);
                                                       RESULT = list;
                                                    
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("branchList",12, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // branchList ::= branch 
            {
              LinkedList<Branch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Branch b = (Branch)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<Branch> list = new LinkedList<Branch>();
                             list.add(b);
                             RESULT = list; 
                         
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("branchList",12, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= ID 
            {
              Type RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 Type t = Type.ENUMERATED;
                       t.setStringValue(name);
                       RESULT = t; 
                    
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = Type.BOOL; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // varDecls ::= varDecls COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 list.add(i);
                                          RESULT = list;
                                       
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("varDecls",18, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varDecls ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<String> list = new LinkedList<String>();
                       list.add(i);
                       RESULT = list; 
                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("varDecls",18, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // decl ::= varDecls COLON type 
            {
              LinkedList<Var> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<Var> list = new LinkedList<Var>();
                                             Var v;
                                             
                                             if ( t.isInt() ){
                                                
                                                 for (int i = 0; i < listNames.size(); i++){
                                                    v = new Var(listNames.get(i), Type.INT);
                                                    list.add(v);
                                                  }
                                              }
                                              else{
                                                 if ( t.isBoolean() ){
                                                 
                                                    for (int i = 0; i < listNames.size(); i++){
                                                        v = new Var(listNames.get(i), Type.BOOL);
                                                        list.add(v);
                                                     }
                                                  }
                                                  else{
                                                     for (int i = 0; i < listNames.size(); i++){
                                                        v = new Var(listNames.get(i), t ); // Enumerated!
                                                        list.add(v);
                                                     }

                                                  }
                                              }
        	                                    
                                              
                                              RESULT = list;
                                          
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("decl",17, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declList ::= declList SEMICOLON decl 
            {
              LinkedList<Var> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Var> list = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Var> listD = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 for (int i = 0; i < listD.size(); i++){
        	                                            list.add(listD.get(i));
                                                     }
                                                     RESULT = list;
                                                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("declList",16, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declList ::= decl 
            {
              LinkedList<Var> RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Var> listD = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  
                             LinkedList<Var> list = new LinkedList<Var>();
                             for (int i = 0; i < listD.size(); i++){
        	                    list.add(listD.get(i));
                             }
                             RESULT = list; 
                        
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("declList",16, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rewardList ::= rewardList COMMA expr COLON INTEGER 
            {
              LinkedList<Reward> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		LinkedList<Reward> list = (LinkedList<Reward>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 Reward r = new Reward(e,i); 
                                                            list.add(r);
                                                            RESULT = list;
                                                        
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("rewardList",46, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rewardList ::= expr COLON MINUS INTEGER 
            {
              LinkedList<Reward> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 Reward r = new Reward(e,i*(-1)); 
                                        LinkedList<Reward> list = new LinkedList<Reward>();
                                        list.add(r);
                                        RESULT = list;
                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("rewardList",46, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rewardList ::= expr COLON INTEGER 
            {
              LinkedList<Reward> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 Reward r = new Reward(e,i); 
                                        LinkedList<Reward> list = new LinkedList<Reward>();
                                        list.add(r);
                                        RESULT = list;
                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("rewardList",46, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // goalCond ::= GOAL COLON expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 RESULT = e;  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("goalCond",15, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // controllerCond ::= CONTROLLER COLON expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 RESULT = e;  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("controllerCond",14, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // initialCond ::= INIT COLON expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 RESULT = e;  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("initialCond",13, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bodyProcess ::= LBRACE REWARDS COLON rewardList SEMICOLON controllerCond SEMICOLON goalCond SEMICOLON initialCond SEMICOLON branchList SEMICOLON RBRACE 
            {
              Proc RESULT =null;
		int listRleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-10)).left;
		int listRright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-10)).right;
		LinkedList<Reward> listR = (LinkedList<Reward>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-10)).value;
		int ctrlleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-8)).left;
		int ctrlright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-8)).right;
		Expression ctrl = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-8)).value;
		int goalleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).left;
		int goalright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).right;
		Expression goal = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		Expression init = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int listBleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listBright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Branch> listB = (LinkedList<Branch>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		 Proc proc = new Proc(init,listB,listR,ctrl,goal);
                                                                                                                                         RESULT = proc;
                                                                                                                                          
                                                                                                                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("bodyProcess",20, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-13)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bodyProcess ::= LBRACE declList SEMICOLON REWARDS COLON rewardList SEMICOLON controllerCond SEMICOLON goalCond SEMICOLON initialCond SEMICOLON branchList SEMICOLON RBRACE 
            {
              Proc RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-14)).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-14)).right;
		LinkedList<Var> listD = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-14)).value;
		int listRleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-10)).left;
		int listRright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-10)).right;
		LinkedList<Reward> listR = (LinkedList<Reward>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-10)).value;
		int ctrlleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-8)).left;
		int ctrlright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-8)).right;
		Expression ctrl = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-8)).value;
		int goalleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).left;
		int goalright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).right;
		Expression goal = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		Expression init = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int listBleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listBright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Branch> listB = (LinkedList<Branch>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		 Proc proc = new Proc(init,listD,listB,listR,ctrl,goal);
                                                                                                                                         RESULT = proc;
                                                                                                                                          
                                                                                                                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("bodyProcess",20, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-15)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bodyProcess ::= LBRACE initialCond SEMICOLON branchList SEMICOLON RBRACE 
            {
              Proc RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		Expression init = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int listBleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listBright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Branch> listB = (LinkedList<Branch>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		 Proc proc = new Proc(init,listB);
                                                                                                                                         RESULT = proc;
                                                                                                                                          
                                                                                                                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("bodyProcess",20, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bodyProcess ::= LBRACE declList SEMICOLON initialCond SEMICOLON branchList SEMICOLON RBRACE 
            {
              Proc RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).right;
		LinkedList<Var> listD = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		Expression init = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int listBleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listBright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Branch> listB = (LinkedList<Branch>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		 Proc proc = new Proc(init,listD,listB);
                                                                                                                                         RESULT = proc;
                                                                                                                                          
                                                                                                                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("bodyProcess",20, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-7)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param ::= ID COLON type 
            {
              Param RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  Param p;
                                             
                                   if ( t.isInt() ){
                                      p = new Param(name, Type.INT);
                                                  
                                   }
                                   else{
                                      if ( t.isBoolean() ){
                                          p = new Param(name, Type.BOOL);
                                      }
                                      else{
                                         p = new Param(name, t);
                                      }
                                   }
                                                    
                                   RESULT = p;
                               
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("param",22, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramList ::= paramList COMMA param 
            {
              LinkedList<Param> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Param> list = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  
                                                list.add(p);
                                                RESULT = list;
                                            
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("paramList",21, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramList ::= param 
            {
              LinkedList<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		
                             LinkedList<Param> list = new LinkedList<Param>();
                             list.add(p);
                             RESULT = list; 
                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("paramList",21, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // process ::= PROCESS ID LPARENT paramList RPARENT bodyProcess 
            {
              Proc RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Param> listP = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Proc proc = (Proc)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 proc.setName(name);
                                                                                                     proc.setParamList(listP);
                                                                                                     RESULT = proc;
                                                                                                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("process",19, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // process ::= PROCESS ID bodyProcess 
            {
              Proc RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Proc proc = (Proc)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 proc.setName(name);
                                                                                     RESULT = proc;  
                                                                                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("process",19, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // processList ::= processList process 
            {
              ProcessCollection RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		ProcessCollection list = (ProcessCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Proc p = (Proc)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 list.addProcess(p);
                                               RESULT = list; 
                                            
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("processList",23, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // processList ::= process 
            {
              ProcessCollection RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Proc p = (Proc)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 
                                  ProcessCollection list = new ProcessCollection();
                                  list.addProcess(p);
                                  RESULT = list; 
                            
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("processList",23, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // globalDecl ::= GLOBAL varDecls COLON type 
            {
              LinkedList<Var> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<Var> list = new LinkedList<Var>();
                                                          Var v;
                                             
                                                          if ( t.isInt() ){
                                                             for (int i = 0; i < listNames.size(); i++){
                                                                 v = new Var(listNames.get(i), Type.INT);
                                                                 list.add(v);
                                                             }
                                                          }
                                                          else{
                                                              if ( t.isBoolean() ){
                                                                  for (int i = 0; i < listNames.size(); i++){
                                                                     v = new Var(listNames.get(i), Type.BOOL);
                                                                     list.add(v);
                                                                  }
                                                              }
                                                              else{
                                                                  for (int i = 0; i < listNames.size(); i++){
                                                                     v = new Var(listNames.get(i), t);
                                                                     list.add(v);
                                                                  }

                                                              }
                                                          }

        	                                           RESULT = list;
                                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("globalDecl",24, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // globalVarList ::= globalVarList SEMICOLON globalDecl 
            {
              GlobalVarCollection RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		GlobalVarCollection list = (GlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Var> listD = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 Var var;
                                                                    for (int i = 0; i < listD.size(); i++){
                                                                       var = listD.get(i);
                                                                       if(var.getType().isInt()){
                                                                           list.addGlobalIntVar(var);
                                                                       }
                                                                       else{
                                                                           if(var.getType().isBoolean()){
                                                                               list.addGlobalBoolVar(var);
                                                                           }
                                                                           else{
                                                                               list.addGlobalEnumVar(var);
                                                                           }
                                                                       }
                                                                    }
                                                                    RESULT = list;
                                                                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("globalVarList",25, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // globalVarList ::= globalDecl 
            {
              GlobalVarCollection RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Var> listD = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  
                                         GlobalVarCollection list = new GlobalVarCollection();
                                         Var var;
                                         for (int i = 0; i < listD.size(); i++){
                                            var = listD.get(i);
                                            if(var.getType().isInt()){
                                                list.addGlobalIntVar(var);
                                            }
                                            else{
                                                if(var.getType().isBoolean()){
                                                    list.addGlobalBoolVar(var);
                                                }
                                                else{
                                                    list.addGlobalEnumVar(var);
                                                }
                                            }
                                         }
                                         RESULT = list; 
                                     
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("globalVarList",25, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constantDecls ::= constantDecls COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 list.add(i);
                                               RESULT = list;
                                            
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("constantDecls",37, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constantDecls ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<String> list = new LinkedList<String>();
                             list.add(i);
                             RESULT = list; 
                         
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("constantDecls",37, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // enumDecl ::= ENUM ID EQUAL LBRACE constantDecls RBRACE 
            {
              EnumType RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		LinkedList<String> constList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		 EnumType  enumT = new EnumType(name, constList.size() );
                                                                         for (int i = 0; i < constList.size(); i++){
                                                                              enumT.addCons(constList.get(i),i);
                                                                         }
                                                                         RESULT = enumT;
                                                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("enumDecl",38, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // enumList ::= enumList SEMICOLON enumDecl 
            {
              LinkedList<EnumType> RESULT =null;
		int listEleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listEright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<EnumType> listE = (LinkedList<EnumType>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int enumTleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int enumTright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		EnumType enumT = (EnumType)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 listE.add(enumT);
                                                            RESULT = listE;
                                                         
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("enumList",39, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // enumList ::= enumDecl 
            {
              LinkedList<EnumType> RESULT =null;
		int enumTleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int enumTright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		EnumType enumT = (EnumType)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 LinkedList<EnumType> listE = new LinkedList<EnumType>();
                                 listE.add(enumT);
                                 RESULT = listE;  
                              
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("enumList",39, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // specification ::= processList program 
            {
              Program RESULT =null;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		ProcessCollection pList = (ProcessCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Main main = (Main)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  // not EnumTypes & not GlobalVars 
                                                         Program prog = new Program(pList, main);
                                                         RESULT = prog;
                                                     
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("specification",26, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // specification ::= enumList SEMICOLON processList program 
            {
              Program RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		LinkedList<EnumType> eList = (LinkedList<EnumType>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		ProcessCollection pList = (ProcessCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Main main = (Main)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  // EnumTypes
                                                                        Program prog = new Program(eList, pList, main);
                                                                        RESULT = prog;
                                                                    
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("specification",26, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // specification ::= globalVarList SEMICOLON processList program 
            {
              Program RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		GlobalVarCollection vList = (GlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		ProcessCollection pList = (ProcessCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Main main = (Main)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 // GlobalVars
                                                                                    Program prog = new Program(vList,pList, main);
                                                                                    RESULT = prog;
                                                                                 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("specification",26, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // specification ::= enumList SEMICOLON globalVarList SEMICOLON processList program 
            {
              Program RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).right;
		LinkedList<EnumType> eList = (LinkedList<EnumType>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		GlobalVarCollection vList = (GlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		ProcessCollection pList = (ProcessCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Main main = (Main)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 // EnumTypes + GlobalVars
                                                                                                   Program prog = new Program(eList,vList,pList, main);
                                                                                                   RESULT = prog;
                                                                                                
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("specification",26, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // mainSpecification ::= specification 
            {
              Program RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Program prog = (Program)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 RESULT = prog;
                                         
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("mainSpecification",34, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= mainSpecification EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		RESULT = start_val;
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserLang$parser.done_parsing();
          return CUP$parserLang$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

