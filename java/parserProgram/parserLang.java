
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 22 11:26:37 ART 2021
//----------------------------------------------------

package parserProgram;

import java_cup.runtime.*;
import lang.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 22 11:26:37 ART 2021
  */
public class parserLang extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserLang() {super();}

  /** Constructor which sets the default scanner. */
  public parserLang(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserLang(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\042\003\000\002\032" +
    "\010\000\002\032\006\000\002\032\006\000\002\032\004" +
    "\000\002\047\003\000\002\047\005\000\002\046\010\000" +
    "\002\045\003\000\002\045\005\000\002\031\003\000\002" +
    "\031\005\000\002\030\006\000\002\027\003\000\002\027" +
    "\004\000\002\023\005\000\002\023\010\000\002\025\003" +
    "\000\002\025\005\000\002\026\005\000\002\024\012\000" +
    "\002\024\010\000\002\017\005\000\002\020\003\000\002" +
    "\020\005\000\002\021\005\000\002\022\003\000\002\022" +
    "\005\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\016\003\000\002\016\005\000\002\015\011\000" +
    "\002\015\011\000\002\050\005\000\002\051\003\000\002" +
    "\051\002\000\002\052\003\000\002\052\002\000\002\055" +
    "\005\000\002\055\002\000\002\054\003\000\002\054\005" +
    "\000\002\053\005\000\002\014\003\000\002\014\005\000" +
    "\002\013\005\000\002\003\003\000\002\004\003\000\002" +
    "\004\005\000\002\005\003\000\002\005\005\000\002\007" +
    "\003\000\002\007\005\000\002\006\003\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\010\003\000\002\010\005\000\002\010\005\000\002" +
    "\011\003\000\002\011\005\000\002\011\005\000\002\012" +
    "\003\000\002\012\004\000\002\012\004\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\005\000\002\037\010\000\002\040\006\000\002" +
    "\036\003\000\002\036\005\000\002\035\005\000\002\033" +
    "\003\000\002\033\005\000\002\034\006\000\002\034\007" +
    "\000\002\043\003\000\002\043\005\000\002\044\002\000" +
    "\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\010\037\013\042\014\043\005\001\002\000" +
    "\004\020\252\001\002\000\004\050\242\001\002\000\006" +
    "\037\ufff3\041\ufff3\001\002\000\004\020\ufffb\001\002\000" +
    "\004\020\236\001\002\000\004\002\000\001\002\000\004" +
    "\020\ufff6\001\002\000\004\050\066\001\002\000\004\050" +
    "\027\001\002\000\006\037\013\041\021\001\002\000\004" +
    "\002\017\001\002\000\004\002\001\001\002\000\004\002" +
    "\ufffc\001\002\000\004\012\023\001\002\000\006\037\ufff2" +
    "\041\ufff2\001\002\000\004\013\024\001\002\000\004\014" +
    "\025\001\002\000\004\050\027\001\002\000\004\015\057" +
    "\001\002\000\006\021\uffe6\025\uffe6\001\002\000\004\020" +
    "\uffb4\001\002\000\004\020\037\001\002\000\006\021\034" +
    "\025\033\001\002\000\004\050\036\001\002\000\004\050" +
    "\035\001\002\000\004\020\uffb2\001\002\000\006\021\uffe5" +
    "\025\uffe5\001\002\000\006\040\043\050\027\001\002\000" +
    "\004\020\uffb1\001\002\000\004\020\uffb3\001\002\000\004" +
    "\020\055\001\002\000\004\050\044\001\002\000\004\012" +
    "\045\001\002\000\010\013\050\025\uffab\050\046\001\002" +
    "\000\006\013\uffaa\025\uffaa\001\002\000\006\013\053\025" +
    "\052\001\002\000\004\020\uffaf\001\002\000\006\013\uffad" +
    "\025\uffad\001\002\000\010\013\uffab\025\uffab\050\046\001" +
    "\002\000\004\020\uffae\001\002\000\006\013\uffac\025\uffac" +
    "\001\002\000\006\015\uffb5\040\043\001\002\000\004\020" +
    "\uffb0\001\002\000\004\002\uffb6\001\002\000\006\021\061" +
    "\025\033\001\002\000\010\034\065\035\064\050\062\001" +
    "\002\000\010\013\uffe2\020\uffe2\025\uffe2\001\002\000\004" +
    "\020\ufff4\001\002\000\010\013\uffe3\020\uffe3\025\uffe3\001" +
    "\002\000\010\013\uffe4\020\uffe4\025\uffe4\001\002\000\006" +
    "\012\071\014\070\001\002\000\006\037\ufff1\041\ufff1\001" +
    "\002\000\006\036\105\050\027\001\002\000\004\050\072" +
    "\001\002\000\004\021\101\001\002\000\006\013\076\025" +
    "\075\001\002\000\006\013\uffef\025\uffef\001\002\000\004" +
    "\050\072\001\002\000\004\014\070\001\002\000\006\037" +
    "\ufff0\041\ufff0\001\002\000\006\013\uffee\025\uffee\001\002" +
    "\000\010\034\065\035\064\050\062\001\002\000\006\013" +
    "\uffed\025\uffed\001\002\000\004\020\227\001\002\000\004" +
    "\020\uffe9\001\002\000\004\021\225\001\002\000\006\021" +
    "\223\025\033\001\002\000\004\020\110\001\002\000\004" +
    "\016\114\001\002\000\026\006\uffd7\011\uffd7\012\uffd7\031" +
    "\122\044\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\001\002\000\004\020\117\001\002\000\004\020\uffe1\001" +
    "\002\000\004\050\115\001\002\000\004\017\116\001\002" +
    "\000\026\006\uffdd\011\uffdd\012\uffdd\031\uffdd\044\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\001\002\000\006" +
    "\015\121\016\114\001\002\000\004\020\uffe0\001\002\000" +
    "\006\037\uffeb\041\uffeb\001\002\000\004\044\221\001\002" +
    "\000\024\006\uffdb\011\uffdb\012\uffdb\044\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\124\052\uffdb\001\002\000\022\006\uffdc" +
    "\011\uffdc\012\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\052" +
    "\uffdc\001\002\000\022\006\uffd9\011\uffd9\012\uffd9\044\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\052\127\001\002\000\020\006" +
    "\130\011\144\012\146\044\132\046\136\047\141\050\142" +
    "\001\002\000\020\006\uffda\011\uffda\012\uffda\044\uffda\046" +
    "\uffda\047\uffda\050\uffda\001\002\000\020\006\130\011\144" +
    "\012\146\044\132\046\136\047\141\050\142\001\002\000" +
    "\020\005\uffcf\013\uffcf\020\uffcf\022\uffcf\025\uffcf\026\uffcf" +
    "\027\214\001\002\000\042\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\013\uffbb\020\uffbb\022\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\001" +
    "\002\000\022\005\uffcb\013\uffcb\020\uffcb\022\uffcb\024\216" +
    "\025\uffcb\026\uffcb\027\uffcb\001\002\000\042\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\013\uffbe\020\uffbe\022\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\001\002\000\042\004\uffc4\005\uffc4\006\uffc4" +
    "\007\202\010\201\013\uffc4\020\uffc4\022\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\001\002\000\042\004\uffba\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\013\uffba\020\uffba\022\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\001\002\000" +
    "\016\005\uffd0\013\uffd0\020\uffd0\022\uffd0\025\uffd0\026\212" +
    "\001\002\000\036\004\175\005\uffc9\006\177\013\uffc9\020" +
    "\uffc9\022\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\173" +
    "\031\172\032\174\033\176\001\002\000\042\004\uffb9\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\013\uffb9\020\uffb9\022\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\001\002\000\042\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\013\uffb8\020\uffb8\022\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\001\002\000\042\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\013\uffc1\020\uffc1\022\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\001\002\000" +
    "\020\006\130\011\144\012\146\044\132\046\136\047\141" +
    "\050\142\001\002\000\004\022\152\001\002\000\020\006" +
    "\130\011\144\012\146\044\132\046\136\047\141\050\142" +
    "\001\002\000\020\005\uffcd\013\uffcd\020\uffcd\022\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\001\002\000\004\013\151\001\002" +
    "\000\042\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\013" +
    "\uffb7\020\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\001\002\000\006\045" +
    "\154\050\153\001\002\000\004\023\167\001\002\000\004" +
    "\021\165\001\002\000\006\005\uffd6\020\uffd6\001\002\000" +
    "\006\020\uffde\025\163\001\002\000\006\005\161\020\uffdf" +
    "\001\002\000\010\005\uffd3\020\uffd3\025\uffd3\001\002\000" +
    "\004\045\154\001\002\000\006\005\uffd5\020\uffd5\001\002" +
    "\000\004\050\153\001\002\000\010\005\uffd2\020\uffd2\025" +
    "\uffd2\001\002\000\004\050\153\001\002\000\010\005\uffd4" +
    "\020\uffd4\025\163\001\002\000\020\006\130\011\144\012" +
    "\146\044\132\046\136\047\141\050\142\001\002\000\010" +
    "\005\uffd1\020\uffd1\025\uffd1\001\002\000\042\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\013\uffbd\020\uffbd\022\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\001\002\000\020\006\130\011\144\012\146" +
    "\044\132\046\136\047\141\050\142\001\002\000\020\006" +
    "\130\011\144\012\146\044\132\046\136\047\141\050\142" +
    "\001\002\000\020\006\130\011\144\012\146\044\132\046" +
    "\136\047\141\050\142\001\002\000\020\006\130\011\144" +
    "\012\146\044\132\046\136\047\141\050\142\001\002\000" +
    "\020\006\130\011\144\012\146\044\132\046\136\047\141" +
    "\050\142\001\002\000\020\006\130\011\144\012\146\044" +
    "\132\046\136\047\141\050\142\001\002\000\042\004\uffc2" +
    "\005\uffc2\006\uffc2\007\202\010\201\013\uffc2\020\uffc2\022" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\001\002\000\020\006\130\011\144\012" +
    "\146\044\132\046\136\047\141\050\142\001\002\000\020" +
    "\006\130\011\144\012\146\044\132\046\136\047\141\050" +
    "\142\001\002\000\042\004\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\013\uffc0\020\uffc0\022\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\001\002" +
    "\000\042\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\013" +
    "\uffbf\020\uffbf\022\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\001\002\000\026\004" +
    "\175\005\uffc5\006\177\013\uffc5\020\uffc5\022\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\001\002\000\042\004\uffc3\005" +
    "\uffc3\006\uffc3\007\202\010\201\013\uffc3\020\uffc3\022\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\001\002\000\026\004\175\005\uffc6\006\177" +
    "\013\uffc6\020\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\001\002\000\026\004\175\005\uffc7\006\177\013\uffc7" +
    "\020\uffc7\022\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\001" +
    "\002\000\026\004\175\005\uffc8\006\177\013\uffc8\020\uffc8" +
    "\022\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\001\002\000" +
    "\020\006\130\011\144\012\146\044\132\046\136\047\141" +
    "\050\142\001\002\000\020\005\uffce\013\uffce\020\uffce\022" +
    "\uffce\025\uffce\026\uffce\027\214\001\002\000\020\006\130" +
    "\011\144\012\146\044\132\046\136\047\141\050\142\001" +
    "\002\000\020\005\uffcc\013\uffcc\020\uffcc\022\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\001\002\000\020\006\130\011\144\012" +
    "\146\044\132\046\136\047\141\050\142\001\002\000\020" +
    "\005\uffca\013\uffca\020\uffca\022\uffca\025\uffca\026\uffca\027" +
    "\uffca\001\002\000\042\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\013\uffbc\020\uffbc\022\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\001\002" +
    "\000\004\030\222\001\002\000\024\006\uffd8\011\uffd8\012" +
    "\uffd8\044\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\001\002\000\010\034\065\035\064\050\062\001\002\000" +
    "\004\020\uffe7\001\002\000\020\006\130\011\144\012\146" +
    "\044\132\046\136\047\141\050\142\001\002\000\004\020" +
    "\uffea\001\002\000\006\036\105\050\027\001\002\000\004" +
    "\020\uffe8\001\002\000\004\020\232\001\002\000\004\016" +
    "\114\001\002\000\004\020\234\001\002\000\006\015\235" +
    "\016\114\001\002\000\006\037\uffec\041\uffec\001\002\000" +
    "\006\037\013\042\014\001\002\000\004\020\ufff5\001\002" +
    "\000\006\037\013\041\021\001\002\000\004\002\ufffe\001" +
    "\002\000\004\023\243\001\002\000\004\014\244\001\002" +
    "\000\004\050\245\001\002\000\006\015\ufff8\025\ufff8\001" +
    "\002\000\006\015\250\025\247\001\002\000\004\050\251" +
    "\001\002\000\004\020\ufff9\001\002\000\006\015\ufff7\025" +
    "\ufff7\001\002\000\010\037\013\042\014\043\005\001\002" +
    "\000\004\020\257\001\002\000\004\020\ufffa\001\002\000" +
    "\006\037\013\041\021\001\002\000\004\002\ufffd\001\002" +
    "\000\006\037\013\042\014\001\002\000\006\037\013\041" +
    "\021\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\022\023\005\027\014\030\011\031\007\032" +
    "\010\042\015\046\006\047\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\057\001\001\000\006\023\021\037" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\031\035\027\036\030" +
    "\040\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\031\033\041\034\037\035\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\046\044\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\066\001\001" +
    "\000\002\001\001\000\012\017\106\020\102\021\103\022" +
    "\105\001\001\000\006\025\072\026\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\077\001\001\000\004\024\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\112\016" +
    "\111\050\110\001\001\000\004\055\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\117\050\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\124\001\001\000\002\001\001\000\004\052\125" +
    "\001\001\000\024\002\133\003\144\004\136\005\130\006" +
    "\132\007\146\010\137\011\134\012\142\001\001\000\002" +
    "\001\001\000\006\002\133\012\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\133\012\170\001\001\000\002\001" +
    "\001\000\024\002\133\003\147\004\136\005\130\006\132" +
    "\007\146\010\137\011\134\012\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\157" +
    "\014\155\053\154\054\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\161\001\001\000" +
    "\002\001\001\000\004\013\163\001\001\000\002\001\001" +
    "\000\006\013\157\014\165\001\001\000\002\001\001\000" +
    "\024\002\133\003\167\004\136\005\130\006\132\007\146" +
    "\010\137\011\134\012\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\133\010\210\011\134\012\142" +
    "\001\001\000\012\002\133\010\207\011\134\012\142\001" +
    "\001\000\012\002\133\010\206\011\134\012\142\001\001" +
    "\000\010\002\133\011\205\012\142\001\001\000\012\002" +
    "\133\010\204\011\134\012\142\001\001\000\010\002\133" +
    "\011\177\012\142\001\001\000\002\001\001\000\006\002" +
    "\133\012\203\001\001\000\006\002\133\012\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\133\005\212\006\132\007\146\010" +
    "\137\011\134\012\142\001\001\000\002\001\001\000\016" +
    "\002\133\006\132\007\214\010\137\011\134\012\142\001" +
    "\001\000\002\001\001\000\014\002\133\006\216\010\137" +
    "\011\134\012\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\223" +
    "\001\001\000\002\001\001\000\024\002\133\003\225\004" +
    "\136\005\130\006\132\007\146\010\137\011\134\012\142" +
    "\001\001\000\002\001\001\000\010\017\230\021\227\022" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\112\016\232\050\110\001\001\000\002\001\001\000" +
    "\006\015\117\050\110\001\001\000\002\001\001\000\010" +
    "\023\005\027\237\030\236\001\001\000\002\001\001\000" +
    "\006\023\021\037\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\023\005\027\254\030" +
    "\011\031\252\046\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\021\037\255\001\001\000\002\001" +
    "\001\000\010\023\005\027\257\030\236\001\001\000\006" +
    "\023\021\037\260\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserLang$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserLang$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserLang$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
    public void syntax_error(Symbol s){
        System.err.println("\n\nSyntax Error - line: " +  (s.left+1) +  " - value:" + s.value);
        
    }


    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {    
         System.err.println("\n\nUnrecovered Syntax error line: " +  (s.left+1) +  " - value:" + s.value);
    }
                                 	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserLang$actions {
  private final parserLang parser;

  /** Constructor */
  CUP$parserLang$actions(parserLang parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserLang$do_action(
    int                        CUP$parserLang$act_num,
    java_cup.runtime.lr_parser CUP$parserLang$parser,
    java.util.Stack            CUP$parserLang$stack,
    int                        CUP$parserLang$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserLang$result;

      /* select the action based on the action number */
      switch (CUP$parserLang$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // invkParam ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  Var value = new Var(id);
                       RESULT= value;
                    
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("invkParam",34, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // invkParam ::= 
            {
              Expression RESULT =null;

              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("invkParam",34, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // invkParamList ::= invkParamList COMMA invkParam 
            {
              LinkedList<Expression> RESULT =null;
		int listInvkleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listInvkright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Expression> listInvk = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression par = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 listInvk.add(par);
                                                 RESULT = listInvk;
    
                                              
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("invkParamList",33, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // invkParamList ::= invkParam 
            {
              LinkedList<Expression> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression par = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		
                                    LinkedList<Expression> listInvk = new LinkedList<Expression>();
                                    listInvk.add(par);
                                    RESULT = listInvk;
                           
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("invkParamList",33, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // invk ::= RUN ID LPARENT invkParamList RPARENT 
            {
              InvkProcess RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		LinkedList<Expression> listP = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		
                                                    RESULT = new InvkProcess(id,listP);
                                                
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("invk",26, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // invk ::= RUN ID LPARENT RPARENT 
            {
              InvkProcess RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		
                                      RESULT = new InvkProcess(id);
                                   
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("invk",26, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // processInvk ::= processInvk SEMICOLON invk 
            {
              LinkedList<InvkProcess> RESULT =null;
		int listInvkleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listInvkright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<InvkProcess> listInvk = (LinkedList<InvkProcess>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int infoProcleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int infoProcright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		InvkProcess infoProc = (InvkProcess)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 listInvk.add(infoProc);
                                                                  RESULT = listInvk;
                        
                                                               
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("processInvk",25, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // processInvk ::= invk 
            {
              LinkedList<InvkProcess> RESULT =null;
		int infoProcleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int infoProcright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		InvkProcess infoProc = (InvkProcess)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		
                                 LinkedList<InvkProcess> listInvk = new LinkedList<InvkProcess>();
                                 listInvk.add(infoProc);
                                 RESULT = listInvk;
                              
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("processInvk",25, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // proc ::= varDecls COLON ID 
            {
              LinkedList<ProcessDecl> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int typeProcleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int typeProcright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String typeProc = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<ProcessDecl> listProcess = new LinkedList<ProcessDecl>();
                                              ProcessDecl p;
                                              for (int i = 0; i < listNames.size(); i++){
                                                    p= new ProcessDecl( listNames.get(i) , typeProc);
                                                    listProcess.add(p);
                                                   
                                               }

                                             RESULT = listProcess;
                                          
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("proc",27, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // processDecl ::= processDecl SEMICOLON proc 
            {
              LinkedList<ProcessDecl> RESULT =null;
		int listProcessleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listProcessright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<ProcessDecl> listProcess = (LinkedList<ProcessDecl>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<ProcessDecl> lp = (LinkedList<ProcessDecl>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  for (int i = 0; i < lp.size(); i++){
                                                                  listProcess.add(lp.get(i));
                                                              }
                                                              RESULT = listProcess;
                                                          
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("processDecl",28, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // processDecl ::= proc 
            {
              LinkedList<ProcessDecl> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<ProcessDecl> lp = (LinkedList<ProcessDecl>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<ProcessDecl> listProcess = new LinkedList<ProcessDecl>();
                            for (int i = 0; i < lp.size(); i++){
                               listProcess.add(lp.get(i));
                                                   
                            }
                            RESULT = listProcess;
                        
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("processDecl",28, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // body ::= processDecl SEMICOLON processInvk SEMICOLON 
            {
              Main RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		LinkedList<ProcessDecl> declList = (LinkedList<ProcessDecl>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int invkListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int invkListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		LinkedList<InvkProcess> invkList = (LinkedList<InvkProcess>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		  Main main = new Main(declList,invkList); 
                                                                           RESULT=main; 
                                                                        
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("body",30, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // program ::= MAIN LPARENT RPARENT LBRACE body RBRACE 
            {
              Main RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		Main m = (Main)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		 RESULT= m; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("program",29, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // primary ::= LPARENT expr RPARENT 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		 
                                       RESULT = ex;
                                    
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // primary ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 
                    Var value = new Var(id);
                    RESULT= value; 
                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // primary ::= FALSE 
            {
              Expression RESULT =null;
		  ConsBoolExp value = new ConsBoolExp(false);
                      RESULT = value;
                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // primary ::= TRUE 
            {
              Expression RESULT =null;
		    ConsBoolExp value = new ConsBoolExp(true);
                       RESULT = value;
                   
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // primary ::= INTEGER 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  ConsIntExp value = new ConsIntExp(v);
                           RESULT = value;
                       
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= MINUS factor 
            {
              Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 ConsIntExp zero = new ConsIntExp(new Integer(0));
                                   NegIntExp expr = new NegIntExp(zero,value); 
                                   RESULT = expr;
                                
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= EXCLAMATION factor 
            {
              Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 NegBoolExp expr = new NegBoolExp(value); 
                                        RESULT = expr;
                                     
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= primary 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 RESULT = op;
                       
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= term SLASH factor 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 DivIntExp expr = new DivIntExp(op1,op2); 
                                         RESULT = expr;
                                       
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= term ASTERISK factor 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 MultIntExp expr = new MultIntExp(op1,op2); 
                                            RESULT = expr;
                                         
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= factor 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  RESULT = val; 
                        
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // addition ::= addition MINUS term 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 NegIntExp expr = new NegIntExp(op1,op2); 
                                               RESULT = expr;
                                            
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // addition ::= addition PLUS term 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 SumIntExp expr = new SumIntExp(op1,op2); 
                                              RESULT = expr;
                                           
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // addition ::= term 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  RESULT = val; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relation ::= addition LEQ addition 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 LessOrEqualBoolExp expr = new LessOrEqualBoolExp(op1,op2); 
                                                RESULT = expr;
                                             
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relation ::= addition GEQ addition 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 GreaterOrEqualBoolExp expr = new GreaterOrEqualBoolExp(op1,op2); 
                                                RESULT = expr;
                                             
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relation ::= addition GT addition 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 GreaterBoolExp expr = new GreaterBoolExp(op1,op2); 
                                                RESULT = expr;
                                             
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relation ::= addition LT addition 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 LessBoolExp expr = new LessBoolExp(op1,op2); 
                                                RESULT = expr;
                                             
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relation ::= addition 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  RESULT = val; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comparison ::= relation DOUBLE_EQUAL relation 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 EqBoolExp expr = new EqBoolExp(op1,op2); 
                                                           RESULT = expr;
                                                        
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comparison ::= relation 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  RESULT = val; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // conjunction ::= conjunction AND comparison 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 AndBoolExp expr = new AndBoolExp(op1,op2); 
                                                      RESULT = expr;
                                                   
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // conjunction ::= comparison 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  RESULT = val; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // disjunction ::= disjunction OR conjunction 
            {
              Expression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 OrBoolExp expr = new OrBoolExp(op1,op2); 
                                                      RESULT = expr;
                                                   
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // disjunction ::= conjunction 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 RESULT = val; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= disjunction 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  RESULT = val; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignation ::= ID EQUAL expr 
            {
              Code RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		   
                                           Var var = new Var(i);
                                           RESULT = new VarAssign(var,value);
                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("assignation",9, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assigList ::= assigList COMMA assignation 
            {
              LinkedList<Code> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Code> list = (LinkedList<Code>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Code assign = (Code)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 list.add(assign);
                                                          RESULT = list;
                                                       
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("assigList",10, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assigList ::= assignation 
            {
              LinkedList<Code> RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Code assign = (Code)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 LinkedList<Code> list = new LinkedList<Code>();
                                     list.add(assign);
                                     RESULT = list; 
                                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("assigList",10, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assignationProb ::= DOUBLE COLON assigList 
            {
              Code RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Code> l = (LinkedList<Code>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		
                                                    RESULT = new ProbAssign(p,l);
                                                
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("assignationProb",41, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assigListProb ::= assigListProb PLUSPLUS assignationProb 
            {
              LinkedList<Code> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Code> list = (LinkedList<Code>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Code pa = (Code)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 list.add(pa);
                                                          RESULT = list;
                                                       
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("assigListProb",42, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assigListProb ::= assignationProb 
            {
              LinkedList<Code> RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Code pa = (Code)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 LinkedList<Code> list = new LinkedList<Code>();
                                                          list.add(pa);
                                                           RESULT = list;
                                                        
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("assigListProb",42, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // actionReward ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("actionReward",43, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // actionReward ::= LT INTEGER GT 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		 RESULT = i; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("actionReward",43, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // internal ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("internal",40, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // internal ::= INTERNAL 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("internal",40, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // faulty ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("faulty",39, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // faulty ::= FAULTY 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("faulty",39, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // label ::= LBRACKET ID RBRACKET 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		 RESULT = id; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("label",38, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // branch ::= label actionReward faulty internal expr RIGHTARROW assigList 
            {
              Branch RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Code> list = (LinkedList<Code>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 
                                                  Branch b = new Branch(e,list,f,i,l,r,false);
                                                  RESULT = b;
                                             
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("branch",11, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // branch ::= label actionReward faulty internal expr RIGHTARROW assigListProb 
            {
              Branch RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Code> list = (LinkedList<Code>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  // Probabilistic branch
                                                  Branch b = new Branch(e,list,f,i,l,r,true);
                                                  RESULT = b;
                                             
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("branch",11, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // branchList ::= branchList SEMICOLON branch 
            {
              LinkedList<Branch> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Branch> list = (LinkedList<Branch>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Branch b = (Branch)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 list.add(b);
                                                       RESULT = list;
                                                    
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("branchList",12, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // branchList ::= branch 
            {
              LinkedList<Branch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Branch b = (Branch)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<Branch> list = new LinkedList<Branch>();
                             list.add(b);
                             RESULT = list; 
                         
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("branchList",12, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= ID 
            {
              Type RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 Type t = Type.ENUMERATED;
                       t.setStringValue(name);
                       RESULT = t; 
                    
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = Type.BOOL; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // varDecls ::= varDecls COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 list.add(i);
                                          RESULT = list;
                                       
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("varDecls",16, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // varDecls ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<String> list = new LinkedList<String>();
                       list.add(i);
                       RESULT = list; 
                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("varDecls",16, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decl ::= varDecls COLON type 
            {
              LinkedList<Var> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<Var> list = new LinkedList<Var>();
                                             Var v;
                                             
                                             if ( t.isInt() ){
                                                
                                                 for (int i = 0; i < listNames.size(); i++){
                                                    v = new Var(listNames.get(i), Type.INT);
                                                    list.add(v);
                                                  }
                                              }
                                              else{
                                                 if ( t.isBoolean() ){
                                                 
                                                    for (int i = 0; i < listNames.size(); i++){
                                                        v = new Var(listNames.get(i), Type.BOOL);
                                                        list.add(v);
                                                     }
                                                  }
                                                  else{
                                                     for (int i = 0; i < listNames.size(); i++){
                                                        v = new Var(listNames.get(i), t ); // Enumerated!
                                                        list.add(v);
                                                     }

                                                  }
                                              }
        	                                    
                                              
                                              RESULT = list;
                                          
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("decl",15, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declList ::= declList SEMICOLON decl 
            {
              LinkedList<Var> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Var> list = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Var> listD = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 for (int i = 0; i < listD.size(); i++){
        	                                            list.add(listD.get(i));
                                                     }
                                                     RESULT = list;
                                                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("declList",14, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declList ::= decl 
            {
              LinkedList<Var> RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Var> listD = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  
                             LinkedList<Var> list = new LinkedList<Var>();
                             for (int i = 0; i < listD.size(); i++){
        	                    list.add(listD.get(i));
                             }
                             RESULT = list; 
                        
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("declList",14, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // initialCond ::= INIT COLON expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 RESULT = e;  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("initialCond",13, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bodyProcess ::= LBRACE initialCond SEMICOLON branchList SEMICOLON RBRACE 
            {
              Proc RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		Expression init = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int listBleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listBright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Branch> listB = (LinkedList<Branch>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		 Proc proc = new Proc(init,listB);
                                                                                                                                         RESULT = proc;
                                                                                                                                          
                                                                                                                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("bodyProcess",18, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bodyProcess ::= LBRACE declList SEMICOLON initialCond SEMICOLON branchList SEMICOLON RBRACE 
            {
              Proc RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).right;
		LinkedList<Var> listD = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-6)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		Expression init = (Expression)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int listBleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listBright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Branch> listB = (LinkedList<Branch>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		 Proc proc = new Proc(init,listD,listB);
                                                                                                                                         RESULT = proc;
                                                                                                                                          
                                                                                                                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("bodyProcess",18, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-7)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param ::= ID COLON type 
            {
              Param RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  Param p;
                                             
                                   if ( t.isInt() ){
                                      p = new Param(name, Type.INT);
                                                  
                                   }
                                   else{
                                      if ( t.isBoolean() ){
                                          p = new Param(name, Type.BOOL);
                                      }
                                      else{
                                         p = new Param(name, t);
                                      }
                                   }
                                                    
                                   RESULT = p;
                               
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("param",20, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramList ::= paramList COMMA param 
            {
              LinkedList<Param> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Param> list = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  
                                                list.add(p);
                                                RESULT = list;
                                            
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("paramList",19, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramList ::= param 
            {
              LinkedList<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		
                             LinkedList<Param> list = new LinkedList<Param>();
                             list.add(p);
                             RESULT = list; 
                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("paramList",19, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // process ::= PROCESS ID LPARENT paramList RPARENT bodyProcess 
            {
              Proc RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<Param> listP = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Proc proc = (Proc)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 proc.setName(name);
                                                                                                     proc.setParamList(listP);
                                                                                                     RESULT = proc;
                                                                                                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("process",17, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // process ::= PROCESS ID bodyProcess 
            {
              Proc RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Proc proc = (Proc)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 proc.setName(name);
                                                                                     RESULT = proc;  
                                                                                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("process",17, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // processList ::= processList process 
            {
              ProcessCollection RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		ProcessCollection list = (ProcessCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Proc p = (Proc)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 list.addProcess(p);
                                               RESULT = list; 
                                            
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("processList",21, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // processList ::= process 
            {
              ProcessCollection RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Proc p = (Proc)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 
                                  ProcessCollection list = new ProcessCollection();
                                  list.addProcess(p);
                                  RESULT = list; 
                            
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("processList",21, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // globalDecl ::= GLOBAL varDecls COLON type 
            {
              LinkedList<Var> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<Var> list = new LinkedList<Var>();
                                                          Var v;
                                             
                                                          if ( t.isInt() ){
                                                             for (int i = 0; i < listNames.size(); i++){
                                                                 v = new Var(listNames.get(i), Type.INT);
                                                                 list.add(v);
                                                             }
                                                          }
                                                          else{
                                                              if ( t.isBoolean() ){
                                                                  for (int i = 0; i < listNames.size(); i++){
                                                                     v = new Var(listNames.get(i), Type.BOOL);
                                                                     list.add(v);
                                                                  }
                                                              }
                                                              else{
                                                                  for (int i = 0; i < listNames.size(); i++){
                                                                     v = new Var(listNames.get(i), t);
                                                                     list.add(v);
                                                                  }

                                                              }
                                                          }

        	                                           RESULT = list;
                                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("globalDecl",22, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // globalVarList ::= globalVarList SEMICOLON globalDecl 
            {
              GlobalVarCollection RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		GlobalVarCollection list = (GlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Var> listD = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 Var var;
                                                                    for (int i = 0; i < listD.size(); i++){
                                                                       var = listD.get(i);
                                                                       if(var.getType().isInt()){
                                                                           list.addGlobalIntVar(var);
                                                                       }
                                                                       else{
                                                                           if(var.getType().isBoolean()){
                                                                               list.addGlobalBoolVar(var);
                                                                           }
                                                                           else{
                                                                               list.addGlobalEnumVar(var);
                                                                           }
                                                                       }
                                                                    }
                                                                    RESULT = list;
                                                                  
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("globalVarList",23, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // globalVarList ::= globalDecl 
            {
              GlobalVarCollection RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		LinkedList<Var> listD = (LinkedList<Var>)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  
                                         GlobalVarCollection list = new GlobalVarCollection();
                                         Var var;
                                         for (int i = 0; i < listD.size(); i++){
                                            var = listD.get(i);
                                            if(var.getType().isInt()){
                                                list.addGlobalIntVar(var);
                                            }
                                            else{
                                                if(var.getType().isBoolean()){
                                                    list.addGlobalBoolVar(var);
                                                }
                                                else{
                                                    list.addGlobalEnumVar(var);
                                                }
                                            }
                                         }
                                         RESULT = list; 
                                     
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("globalVarList",23, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constantDecls ::= constantDecls COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 list.add(i);
                                               RESULT = list;
                                            
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("constantDecls",35, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constantDecls ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  LinkedList<String> list = new LinkedList<String>();
                             list.add(i);
                             RESULT = list; 
                         
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("constantDecls",35, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // enumDecl ::= ENUM ID EQUAL LBRACE constantDecls RBRACE 
            {
              EnumType RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-4)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		LinkedList<String> constList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		 EnumType  enumT = new EnumType(name, constList.size() );
                                                                         for (int i = 0; i < constList.size(); i++){
                                                                              enumT.addCons(constList.get(i),i);
                                                                         }
                                                                         RESULT = enumT;
                                                                      
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("enumDecl",36, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // enumList ::= enumList SEMICOLON enumDecl 
            {
              LinkedList<EnumType> RESULT =null;
		int listEleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).left;
		int listEright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).right;
		LinkedList<EnumType> listE = (LinkedList<EnumType>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)).value;
		int enumTleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int enumTright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		EnumType enumT = (EnumType)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 listE.add(enumT);
                                                            RESULT = listE;
                                                         
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("enumList",37, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-2)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // enumList ::= enumDecl 
            {
              LinkedList<EnumType> RESULT =null;
		int enumTleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int enumTright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		EnumType enumT = (EnumType)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 LinkedList<EnumType> listE = new LinkedList<EnumType>();
                                 listE.add(enumT);
                                 RESULT = listE;  
                              
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("enumList",37, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // specification ::= processList program 
            {
              Program RESULT =null;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		ProcessCollection pList = (ProcessCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Main main = (Main)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  // not EnumTypes & not GlobalVars 
                                                         Program prog = new Program(pList, main);
                                                         RESULT = prog;
                                                     
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("specification",24, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // specification ::= enumList SEMICOLON processList program 
            {
              Program RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		LinkedList<EnumType> eList = (LinkedList<EnumType>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		ProcessCollection pList = (ProcessCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Main main = (Main)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		  // EnumTypes
                                                                        Program prog = new Program(eList, pList, main);
                                                                        RESULT = prog;
                                                                    
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("specification",24, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // specification ::= globalVarList SEMICOLON processList program 
            {
              Program RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		GlobalVarCollection vList = (GlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		ProcessCollection pList = (ProcessCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Main main = (Main)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 // GlobalVars
                                                                                    Program prog = new Program(vList,pList, main);
                                                                                    RESULT = prog;
                                                                                 
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("specification",24, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // specification ::= enumList SEMICOLON globalVarList SEMICOLON processList program 
            {
              Program RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).right;
		LinkedList<EnumType> eList = (LinkedList<EnumType>)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).right;
		GlobalVarCollection vList = (GlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		ProcessCollection pList = (ProcessCollection)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Main main = (Main)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 // EnumTypes + GlobalVars
                                                                                                   Program prog = new Program(eList,vList,pList, main);
                                                                                                   RESULT = prog;
                                                                                                
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("specification",24, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-5)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // mainSpecification ::= specification 
            {
              Program RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()).right;
		Program prog = (Program)((java_cup.runtime.Symbol) CUP$parserLang$stack.peek()).value;
		 RESULT = prog;
                                         
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("mainSpecification",32, ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          return CUP$parserLang$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= mainSpecification EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)).value;
		RESULT = start_val;
              CUP$parserLang$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserLang$stack.elementAt(CUP$parserLang$top-1)), ((java_cup.runtime.Symbol)CUP$parserLang$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserLang$parser.done_parsing();
          return CUP$parserLang$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

